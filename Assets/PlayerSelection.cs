//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerSelection.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerSelection: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerSelection()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerSelection"",
    ""maps"": [
        {
            ""name"": ""SelectionAction"",
            ""id"": ""5653d062-a15b-4998-a3ee-3e0a6ecb408d"",
            ""actions"": [
                {
                    ""name"": ""SelectionControls"",
                    ""type"": ""Button"",
                    ""id"": ""8b864eb7-fbeb-40c1-9e01-967282e60fe5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cfdd621d-a109-46fd-841e-0ca9c283eac5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectShift"",
                    ""type"": ""Button"",
                    ""id"": ""f310a73f-6ca0-40b1-8b10-76bcc5e08013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ControlA"",
                    ""type"": ""Button"",
                    ""id"": ""2599d3a2-907c-4f62-8d48-399899b43de4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""628d0602-da17-4ae7-aea4-4deee1d8c5ac"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectionControls"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a016573-d2ab-457c-98d0-907342294b54"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1c052ef-4ff7-4c4e-ae61-cb89e77d57be"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectShift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""cmdA"",
                    ""id"": ""20fdd699-f8fc-40e0-bf70-0daa23e48d4f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""b9923576-c54b-4b5f-ba88-6ea588ac4a50"",
                    ""path"": ""<Keyboard>/leftMeta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ca7a8bed-b642-4c67-8bba-7adf6b0a3e7f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""controlA"",
                    ""id"": ""e14e3d9e-adf0-456b-b247-bf059c8e1660"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""dbf8646b-d88a-4274-9f01-7e8d72e6457a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""3513f233-a9b0-4c20-b7a2-b462190a6e4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ControlA"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SelectionAction
        m_SelectionAction = asset.FindActionMap("SelectionAction", throwIfNotFound: true);
        m_SelectionAction_SelectionControls = m_SelectionAction.FindAction("SelectionControls", throwIfNotFound: true);
        m_SelectionAction_PointerPosition = m_SelectionAction.FindAction("PointerPosition", throwIfNotFound: true);
        m_SelectionAction_SelectShift = m_SelectionAction.FindAction("SelectShift", throwIfNotFound: true);
        m_SelectionAction_ControlA = m_SelectionAction.FindAction("ControlA", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SelectionAction
    private readonly InputActionMap m_SelectionAction;
    private List<ISelectionActionActions> m_SelectionActionActionsCallbackInterfaces = new List<ISelectionActionActions>();
    private readonly InputAction m_SelectionAction_SelectionControls;
    private readonly InputAction m_SelectionAction_PointerPosition;
    private readonly InputAction m_SelectionAction_SelectShift;
    private readonly InputAction m_SelectionAction_ControlA;
    public struct SelectionActionActions
    {
        private @PlayerSelection m_Wrapper;
        public SelectionActionActions(@PlayerSelection wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectionControls => m_Wrapper.m_SelectionAction_SelectionControls;
        public InputAction @PointerPosition => m_Wrapper.m_SelectionAction_PointerPosition;
        public InputAction @SelectShift => m_Wrapper.m_SelectionAction_SelectShift;
        public InputAction @ControlA => m_Wrapper.m_SelectionAction_ControlA;
        public InputActionMap Get() { return m_Wrapper.m_SelectionAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionActionActions set) { return set.Get(); }
        public void AddCallbacks(ISelectionActionActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionActionActionsCallbackInterfaces.Add(instance);
            @SelectionControls.started += instance.OnSelectionControls;
            @SelectionControls.performed += instance.OnSelectionControls;
            @SelectionControls.canceled += instance.OnSelectionControls;
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @SelectShift.started += instance.OnSelectShift;
            @SelectShift.performed += instance.OnSelectShift;
            @SelectShift.canceled += instance.OnSelectShift;
            @ControlA.started += instance.OnControlA;
            @ControlA.performed += instance.OnControlA;
            @ControlA.canceled += instance.OnControlA;
        }

        private void UnregisterCallbacks(ISelectionActionActions instance)
        {
            @SelectionControls.started -= instance.OnSelectionControls;
            @SelectionControls.performed -= instance.OnSelectionControls;
            @SelectionControls.canceled -= instance.OnSelectionControls;
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @SelectShift.started -= instance.OnSelectShift;
            @SelectShift.performed -= instance.OnSelectShift;
            @SelectShift.canceled -= instance.OnSelectShift;
            @ControlA.started -= instance.OnControlA;
            @ControlA.performed -= instance.OnControlA;
            @ControlA.canceled -= instance.OnControlA;
        }

        public void RemoveCallbacks(ISelectionActionActions instance)
        {
            if (m_Wrapper.m_SelectionActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectionActionActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectionActionActions @SelectionAction => new SelectionActionActions(this);
    public interface ISelectionActionActions
    {
        void OnSelectionControls(InputAction.CallbackContext context);
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnSelectShift(InputAction.CallbackContext context);
        void OnControlA(InputAction.CallbackContext context);
    }
}
